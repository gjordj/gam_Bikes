"0","###################################"
"0","# USING FREEDOM DEGREES OF SPLINES#"
"0","###################################"
"0",""
"0","#################################################################################"
"0","# Optimal DF of the splines used for each relationship between Count vs Variable#"
"0","#################################################################################"
"0","# To apply GAMs we need the following:"
"0","#We calculate again the freedom degrees of each spline for each relationship."
"0","df_temp <- (smooth.spline(raw_data$temp, raw_data$casual, cv = TRUE)$df)"
"2","Warning in smooth.spline(raw_data$temp, raw_data$casual, cv = TRUE) :"
"2","
 "
"2"," cross-validation with non-unique 'x' values seems doubtful
"
"0","df_season <- (smooth.spline(raw_data$season, raw_data$casual, cv = TRUE)$df)"
"2","Warning in smooth.spline(raw_data$season, raw_data$casual, cv = TRUE) :"
"2","
 "
"2"," cross-validation with non-unique 'x' values seems doubtful
"
"0","df_mnth <- (smooth.spline(raw_data$mnth, raw_data$casual, cv = TRUE)$df)"
"2","Warning in smooth.spline(raw_data$mnth, raw_data$casual, cv = TRUE) :"
"2","
 "
"2"," cross-validation with non-unique 'x' values seems doubtful
"
"0","# df_holiday <- smooth.spline(raw_data$holiday, raw_data$casual, cv = TRUE)$df"
"0","# df_weekday <- smooth.spline(raw_data$weekday, raw_data$casual, cv = TRUE)$df"
"0","# df_workingday <- smooth.spline(raw_data$workingday, raw_data$casual, cv = TRUE)$df"
"0","# df_weathersit <- smooth.spline(raw_data$weathersit, raw_data$casual, cv = TRUE)$df"
"0","df_atemp <- (smooth.spline(raw_data$atemp, raw_data$casual, cv = TRUE)$df)"
"2","Warning in smooth.spline(raw_data$atemp, raw_data$casual, cv = TRUE) :"
"2","
 "
"2"," cross-validation with non-unique 'x' values seems doubtful
"
"0","df_hum <- (smooth.spline(raw_data$hum, raw_data$casual, cv = TRUE)$df)"
"2","Warning in smooth.spline(raw_data$hum, raw_data$casual, cv = TRUE) :"
"2","
 "
"2"," cross-validation with non-unique 'x' values seems doubtful
"
"0","df_windspeed <- (smooth.spline(raw_data$windspeed, raw_data$casual, cv = TRUE)$df)"
"2","Warning in smooth.spline(raw_data$windspeed, raw_data$casual, cv = TRUE) :"
"2","
 "
"2"," cross-validation with non-unique 'x' values seems doubtful
"
"0","df_casual <- (smooth.spline(raw_data$casual, raw_data$casual, cv = TRUE)$df)"
"2","Warning in smooth.spline(raw_data$casual, raw_data$casual, cv = TRUE) :"
"2","
 "
"2"," cross-validation with non-unique 'x' values seems doubtful
"
"0","df_registered <- (smooth.spline(raw_data$registered, raw_data$registered, cv = TRUE)$df)"
"2","Warning in smooth.spline(raw_data$registered, raw_data$registered, cv = TRUE) :"
"2","
 "
"2"," cross-validation with non-unique 'x' values seems doubtful
"
"0","df_temp"
"1","[1]"
"1"," 5.423389"
"1","
"
"0","df_season"
"1","[1]"
"1"," 4.000016"
"1","
"
"0","df_mnth"
"1","[1]"
"1"," 4.576013"
"1","
"
"0","df_atemp"
"1","[1]"
"1"," 5.649825"
"1","
"
"0","df_hum"
"1","[1]"
"1"," 4.029755"
"1","
"
"0","df_windspeed"
"1","[1]"
"1"," 3.131748"
"1","
"
"0","df_casual"
"1","[1]"
"1"," 126.9947"
"1","
"
"0","df_registered"
"1","[1]"
"1"," 82.40849"
"1","
"
"0","#############################"
"0","# Creation of different GAMs#"
"0","#############################"
"0","#Now we use GAMs to predict Count using a natural spline of different variables. "
"0",""
"0","# Categorical variables"
"0","# raw_data$season <- as.factor(raw_data$season)"
"0","# raw_data$weathersit <- as.factor(raw_data$weathersit)"
"0","# raw_data$mnth <- as.factor(raw_data$mnth)"
"0","# raw_data$weekday <- as.factor(raw_data$weekday)"
"0","# Dumny variables:"
"0","# holiday, workingday are dummy (0,1)"
"0",""
"0","# gam1 <- gam(casual~s(temp, 9)+"
"0","#               season +"
"0","#               mnth +"
"0","#               s(atemp,9 )+"
"0","#               s(hum,5 )+"
"0","#               s(windspeed,6 )+holiday+weekday+workingday+weathersit, data=raw_data)"
"0",""
"0",""
"0","#To fit more complex splines, or other components that cannot be specified as basis functions, we need to use"
"0","# the gam library in R. the s() function is used to indicate a smoothing spline."
"0","gam1 <- gam(casual~s(temp, df_temp)+"
"0","              s(season,df_season )+"
"0","              s(mnth, df_mnth)+"
"0","              s(atemp,df_atemp )+"
"0","              s(hum,df_hum )+"
"0","              s(windspeed,df_windspeed )+holiday+weekday+workingday+weathersit, data=raw_data)"
"2","Warning in model.matrix.default(mt, mf, contrasts) :"
"2","
 "
"2"," non-list contrasts argument ignored
"
"0","# plot(gam1, se=TRUE, col='green')"
"0",""
"0","set.seed(17)"
"0","gam1error <- sqrt(cv.glm(raw_data, gam1, K=10)$delta[1])"
"2","Warning in model.matrix.default(mt, mf, contrasts) :"
"2","
 "
"2"," non-list contrasts argument ignored
"
"2","Warning in model.matrix.default(mt, mf, contrasts) :"
"2","
 "
"2"," non-list contrasts argument ignored
"
"2","Warning in model.matrix.default(mt, mf, contrasts) :"
"2","
 "
"2"," non-list contrasts argument ignored
"
"2","Warning in model.matrix.default(mt, mf, contrasts) :"
"2","
 "
"2"," non-list contrasts argument ignored
"
"2","Warning in model.matrix.default(mt, mf, contrasts) :"
"2","
 "
"2"," non-list contrasts argument ignored
"
"2","Warning in model.matrix.default(mt, mf, contrasts) :"
"2","
 "
"2"," non-list contrasts argument ignored
"
"2","Warning in model.matrix.default(mt, mf, contrasts) :"
"2","
 "
"2"," non-list contrasts argument ignored
"
"2","Warning in model.matrix.default(mt, mf, contrasts) :"
"2","
 "
"2"," non-list contrasts argument ignored
"
"2","Warning in model.matrix.default(mt, mf, contrasts) :"
"2","
 "
"2"," non-list contrasts argument ignored
"
"2","Warning in model.matrix.default(mt, mf, contrasts) :"
"2","
 "
"2"," non-list contrasts argument ignored
"
"0","gam1error"
"1","[1]"
"1"," 375.516"
"1","
"
"0","summary(gam1)"
"1","
Call: "
"1","gam(formula = casual ~ s(temp, df_temp) + s(season, df_season) + 
"
"1","    s(mnth, df_mnth) + s(atemp, df_atemp) + s(hum, df_hum) + 
"
"1","    s(windspeed, df_windspeed) + holiday + weekday + workingday + 
"
"1","    weathersit, data = raw_data)
"
"1","Deviance Residuals:
"
"1","     Min "
"1","      1Q "
"1","  Median "
"1","      3Q "
"1","     Max "
"1","
"
"1","-1092.83 "
"1"," -235.09 "
"1","  -37.31 "
"1","  175.76 "
"1"," 1513.96 "
"1","
"
"1","
(Dispersion Parameter for gaussian family taken to be 131369.9)
"
"1","
    Null Deviance:"
"1"," "
"1","344158822"
"1"," "
"1","on"
"1"," "
"1","730"
"1"," "
"1","degrees of freedom"
"1","
Residual Deviance:"
"1"," "
"1","91983794"
"1"," "
"1","on"
"1"," "
"1","700.1892"
"1"," "
"1","degrees of freedom"
"1","
AIC:"
"1"," "
"1","10722.03"
"1"," "
"1","
"
"1","
Number of Local Scoring Iterations:"
"1"," "
"1","8"
"1"," "
"1","
"
"1","
"
"1","Anova for Parametric Effects"
"1","
"
"1","                          "
"1","     Df"
"1","    Sum Sq"
"1","   Mean Sq"
"1","
s(temp, df_temp)          "
"1","   1.00"
"1","  78833087"
"1","  78833087"
"1","
s(season, df_season)      "
"1","   1.00"
"1","     74539"
"1","     74539"
"1","
s(mnth, df_mnth)          "
"1","   1.00"
"1","    163816"
"1","    163816"
"1","
s(atemp, df_atemp)        "
"1","   1.00"
"1","       171"
"1","       171"
"1","
s(hum, df_hum)            "
"1","   1.00"
"1","  14361979"
"1","  14361979"
"1","
s(windspeed, df_windspeed)"
"1","   1.00"
"1","   6569075"
"1","   6569075"
"1","
holiday                   "
"1","   1.00"
"1","   1878230"
"1","   1878230"
"1","
weekday                   "
"1","   1.00"
"1","   1607220"
"1","   1607220"
"1","
workingday                "
"1","   1.00"
"1"," 106325765"
"1"," 106325765"
"1","
weathersit                "
"1","   1.00"
"1","    477610"
"1","    477610"
"1","
Residuals                 "
"1"," 700.19"
"1","  91983794"
"1","    131370"
"1","
"
"1","                          "
"1","  F value"
"1","    Pr(>F)"
"1","    "
"1","
s(temp, df_temp)          "
"1"," 600.0848"
"1"," < 2.2e-16"
"1"," ***"
"1","
s(season, df_season)      "
"1","   0.5674"
"1"," 0.4515488"
"1","    "
"1","
s(mnth, df_mnth)          "
"1","   1.2470"
"1"," 0.2645119"
"1","    "
"1","
s(atemp, df_atemp)        "
"1","   0.0013"
"1"," 0.9711961"
"1","    "
"1","
s(hum, df_hum)            "
"1"," 109.3247"
"1"," < 2.2e-16"
"1"," ***"
"1","
s(windspeed, df_windspeed)"
"1","  50.0044"
"1"," 3.723e-12"
"1"," ***"
"1","
holiday                   "
"1","  14.2973"
"1"," 0.0001694"
"1"," ***"
"1","
weekday                   "
"1","  12.2343"
"1"," 0.0004988"
"1"," ***"
"1","
workingday                "
"1"," 809.3616"
"1"," < 2.2e-16"
"1"," ***"
"1","
weathersit                "
"1","   3.6356"
"1"," 0.0569648"
"1"," .  "
"1","
Residuals                 "
"1","         "
"1","          "
"1","    "
"1","
"
"1","---
Signif. codes:  "
"1",""
"1","
"
"1","0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"
"1","
"
"1","
"
"1","Anova for Nonparametric Effects"
"1","
"
"1","                          "
"1"," Npar Df"
"1","  Npar F"
"1","     Pr(F)"
"1","    "
"1","
(Intercept)               "
"1","        "
"1","        "
"1","          "
"1","    "
"1","
s(temp, df_temp)          "
"1","     4.4"
"1"," 22.9518"
"1"," < 2.2e-16"
"1"," ***"
"1","
s(season, df_season)      "
"1","     2.0"
"1","  5.8778"
"1","  0.002941"
"1"," ** "
"1","
s(mnth, df_mnth)          "
"1","     3.6"
"1","  2.4895"
"1","  0.048643"
"1"," *  "
"1","
s(atemp, df_atemp)        "
"1","     4.6"
"1","  3.8612"
"1","  0.002447"
"1"," ** "
"1","
s(hum, df_hum)            "
"1","     3.0"
"1","  5.1770"
"1","  0.001465"
"1"," ** "
"1","
s(windspeed, df_windspeed)"
"1","     2.1"
"1","  2.9324"
"1","  0.050495"
"1"," .  "
"1","
holiday                   "
"1","        "
"1","        "
"1","          "
"1","    "
"1","
weekday                   "
"1","        "
"1","        "
"1","          "
"1","    "
"1","
workingday                "
"1","        "
"1","        "
"1","          "
"1","    "
"1","
weathersit                "
"1","        "
"1","        "
"1","          "
"1","    "
"1","
"
"1","---
Signif. codes:  "
"1",""
"1","
"
"1","0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"
"1","
"
"0","ggplot(raw_data, aes(x= casual)) + "
"0","  geom_histogram(aes(y=..density..), colour=""black"", fill=""white"")+"
"0","  geom_density(alpha=.2, fill=""#FF6666"")+"
"0","  geom_vline(xintercept = mean(raw_data$casual)+gam1error, linetype=""dotted"", "
"0","             color = ""red"", size=1.5)+"
"0","  geom_vline(xintercept = mean(raw_data$casual)-gam1error, linetype=""dotted"", "
"0","             color = ""red"", size=1.5)+"
"0","  ggtitle(paste(""GAM model: Bikes rented interval: +-"", round(gam1error)))"
"2","`stat_bin()` using `bins = 30`. Pick better value with
`binwidth`.
"
