"0",""
"0","###################################"
"0","# USING FREEDOM DEGREES OF SPLINES#"
"0","###################################"
"0",""
"0","#################################################################################"
"0","# Optimal DF of the splines used for each relationship between Count vs Variable#"
"0","#################################################################################"
"0","# To apply GAMs we need the following:"
"0","#We calculate again the freedom degrees of each spline for each relationship."
"0","df_temp <- (smooth.spline(raw_data$temp, raw_data$cnt, cv = TRUE)$df)"
"2","cross-validation with non-unique 'x' values seems doubtful"
"0","df_season <- (smooth.spline(raw_data$season, raw_data$cnt, cv = TRUE)$df)"
"2","cross-validation with non-unique 'x' values seems doubtful"
"0","df_mnth <- (smooth.spline(raw_data$mnth, raw_data$cnt, cv = TRUE)$df)"
"2","cross-validation with non-unique 'x' values seems doubtful"
"0","# df_holiday <- smooth.spline(raw_data$holiday, raw_data$cnt, cv = TRUE)$df"
"0","# df_weekday <- smooth.spline(raw_data$weekday, raw_data$cnt, cv = TRUE)$df"
"0","# df_workingday <- smooth.spline(raw_data$workingday, raw_data$cnt, cv = TRUE)$df"
"0","# df_weathersit <- smooth.spline(raw_data$weathersit, raw_data$cnt, cv = TRUE)$df"
"0","df_atemp <- (smooth.spline(raw_data$atemp, raw_data$cnt, cv = TRUE)$df)"
"2","cross-validation with non-unique 'x' values seems doubtful"
"0","df_hum <- (smooth.spline(raw_data$hum, raw_data$cnt, cv = TRUE)$df)"
"2","cross-validation with non-unique 'x' values seems doubtful"
"0","df_windspeed <- (smooth.spline(raw_data$windspeed, raw_data$cnt, cv = TRUE)$df)"
"2","cross-validation with non-unique 'x' values seems doubtful"
"0","df_casual <- (smooth.spline(raw_data$casual, raw_data$cnt, cv = TRUE)$df)"
"2","cross-validation with non-unique 'x' values seems doubtful"
"0","df_registered <- (smooth.spline(raw_data$registered, raw_data$cnt, cv = TRUE)$df)"
"2","cross-validation with non-unique 'x' values seems doubtful"
"0","df_temp"
"1","[1]"
"1"," 9.103704"
"1","
"
"0","df_season"
"1","[1]"
"1"," 4"
"1","
"
"0","df_mnth"
"1","[1]"
"1"," 8.276058"
"1","
"
"0","df_atemp"
"1","[1]"
"1"," 8.805497"
"1","
"
"0","df_hum"
"1","[1]"
"1"," 4.548876"
"1","
"
"0","df_windspeed"
"1","[1]"
"1"," 6.007664"
"1","
"
"0","df_casual"
"1","[1]"
"1"," 11.27571"
"1","
"
"0","df_registered"
"1","[1]"
"1"," 12.95976"
"1","
"
"0","#############################"
"0","# Creation of different GAMs#"
"0","#############################"
"0","#Now we use GAMs to predict Count using a natural spline of different variables. "
"0",""
"0","# Categorical variables"
"0","# raw_data$season <- as.factor(raw_data$season)"
"0","# raw_data$weathersit <- as.factor(raw_data$weathersit)"
"0","# raw_data$mnth <- as.factor(raw_data$mnth)"
"0","# raw_data$weekday <- as.factor(raw_data$weekday)"
"0","# Dumny variables:"
"0","# holiday, workingday are dummy (0,1)"
"0",""
"0","# gam1 <- gam(cnt~s(temp, 9)+"
"0","#               season +"
"0","#               mnth +"
"0","#               s(atemp,9 )+"
"0","#               s(hum,5 )+"
"0","#               s(windspeed,6 )+holiday+weekday+workingday+weathersit, data=raw_data)"
"0",""
"0",""
"0","#To fit more complex splines, or other components that cannot be specified as basis functions, we need to use"
"0","# the gam library in R. the s() function is used to indicate a smoothing spline."
"0","gam1 <- gam(cnt~s(temp, df_temp)+"
"0","              s(season,df_season )+"
"0","              s(mnth, df_mnth)+"
"0","              s(atemp,df_atemp )+"
"0","              s(hum,df_hum )+"
"0","              s(windspeed,df_windspeed )+holiday+weekday+workingday+weathersit, data=raw_data)"
"2","non-list contrasts argument ignored"
"0","# plot(gam1, se=TRUE, col='green')"
"0",""
"0","set.seed(17)"
"0","gam1error <- sqrt(cv.glm(raw_data, gam1, K=10)$delta[1])"
"2","non-list contrasts argument ignored"
"2","non-list contrasts argument ignored"
"2","non-list contrasts argument ignored"
"2","non-list contrasts argument ignored"
"2","non-list contrasts argument ignored"
"2","non-list contrasts argument ignored"
"2","non-list contrasts argument ignored"
"2","non-list contrasts argument ignored"
"2","non-list contrasts argument ignored"
"2","non-list contrasts argument ignored"
"0","gam1error"
"1","[1]"
"1"," 1213.446"
"1","
"
"0","summary(gam1)"
"1","
Call: "
"1","gam(formula = cnt ~ s(temp, df_temp) + s(season, df_season) + 
"
"1","    s(mnth, df_mnth) + s(atemp, df_atemp) + s(hum, df_hum) + 
"
"1","    s(windspeed, df_windspeed) + holiday + weekday + workingday + 
"
"1","    weathersit, data = raw_data)
"
"1","Deviance Residuals:
"
"1","    Min "
"1","     1Q "
"1"," Median "
"1","     3Q "
"1","    Max "
"1","
"
"1","-3072.4 "
"1"," -936.0 "
"1"," -119.3 "
"1"," 1016.3 "
"1"," 3048.0 "
"1","
"
"1","
(Dispersion Parameter for gaussian family taken to be 1346600)
"
"1","
    Null Deviance:"
"1"," "
"1","2739535392"
"1"," "
"1","on"
"1"," "
"1","730"
"1"," "
"1","degrees of freedom"
"1","
Residual Deviance:"
"1"," "
"1","924114467"
"1"," "
"1","on"
"1"," "
"1","686.2577"
"1"," "
"1","degrees of freedom"
"1","
AIC:"
"1"," "
"1","12436.47"
"1"," "
"1","
"
"1","
Number of Local Scoring Iterations:"
"1"," "
"1","18"
"1"," "
"1","
"
"1","
"
"1","Anova for Parametric Effects"
"1","
"
"1","                          "
"1","     Df"
"1","     Sum Sq"
"1","    Mean Sq"
"1","  F value"
"1","    Pr(>F)"
"1","    "
"1","
s(temp, df_temp)          "
"1","   1.00"
"1"," 1244675684"
"1"," 1244675684"
"1"," 924.3100"
"1"," < 2.2e-16"
"1"," ***"
"1","
s(season, df_season)      "
"1","   1.00"
"1","   78093671"
"1","   78093671"
"1","  57.9932"
"1"," 8.737e-14"
"1"," ***"
"1","
s(mnth, df_mnth)          "
"1","   1.00"
"1","   24516915"
"1","   24516915"
"1","  18.2065"
"1"," 2.261e-05"
"1"," ***"
"1","
s(atemp, df_atemp)        "
"1","   1.00"
"1","       5664"
"1","       5664"
"1","   0.0042"
"1","  0.948310"
"1","    "
"1","
s(hum, df_hum)            "
"1","   1.00"
"1","  228807797"
"1","  228807797"
"1"," 169.9152"
"1"," < 2.2e-16"
"1"," ***"
"1","
s(windspeed, df_windspeed)"
"1","   1.00"
"1","   98520354"
"1","   98520354"
"1","  73.1623"
"1"," < 2.2e-16"
"1"," ***"
"1","
holiday                   "
"1","   1.00"
"1","    6224195"
"1","    6224195"
"1","   4.6222"
"1","  0.031910"
"1"," *  "
"1","
weekday                   "
"1","   1.00"
"1","   12017897"
"1","   12017897"
"1","   8.9246"
"1","  0.002914"
"1"," ** "
"1","
workingday                "
"1","   1.00"
"1","      22605"
"1","      22605"
"1","   0.0168"
"1","  0.896950"
"1","    "
"1","
weathersit                "
"1","   1.00"
"1","    7259260"
"1","    7259260"
"1","   5.3908"
"1","  0.020535"
"1"," *  "
"1","
Residuals                 "
"1"," 686.26"
"1","  924114467"
"1","    1346600"
"1","         "
"1","          "
"1","    "
"1","
"
"1","---
Signif. codes:  "
"1",""
"1","0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"
"1","
"
"1","
"
"1","Anova for Nonparametric Effects"
"1","
"
"1","                          "
"1"," Npar Df"
"1"," Npar F"
"1","     Pr(F)"
"1","    "
"1","
(Intercept)               "
"1","        "
"1","       "
"1","          "
"1","    "
"1","
s(temp, df_temp)          "
"1","     8.1"
"1"," 89.849"
"1"," < 2.2e-16"
"1"," ***"
"1","
s(season, df_season)      "
"1","     2.0"
"1","  1.946"
"1","   0.14367"
"1","    "
"1","
s(mnth, df_mnth)          "
"1","     7.3"
"1","  1.722"
"1","   0.09767"
"1"," .  "
"1","
s(atemp, df_atemp)        "
"1","     7.8"
"1"," 31.808"
"1"," < 2.2e-16"
"1"," ***"
"1","
s(hum, df_hum)            "
"1","     3.5"
"1"," 11.410"
"1"," 3.164e-08"
"1"," ***"
"1","
s(windspeed, df_windspeed)"
"1","     5.0"
"1","  0.806"
"1","   0.54546"
"1","    "
"1","
holiday                   "
"1","        "
"1","       "
"1","          "
"1","    "
"1","
weekday                   "
"1","        "
"1","       "
"1","          "
"1","    "
"1","
workingday                "
"1","        "
"1","       "
"1","          "
"1","    "
"1","
weathersit                "
"1","        "
"1","       "
"1","          "
"1","    "
"1","
"
"1","---
Signif. codes:  "
"1",""
"1","0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"
"1","
"
"0","ggplot(raw_data, aes(x= cnt)) + "
"0","  geom_histogram(aes(y=..density..), colour=""black"", fill=""white"")+"
"0","  geom_density(alpha=.2, fill=""#FF6666"")+"
"0","  geom_vline(xintercept = mean(raw_data$cnt)+gam1error, linetype=""dotted"", "
"0","               color = ""red"", size=1.5)+"
"0","  geom_vline(xintercept = mean(raw_data$cnt)-gam1error, linetype=""dotted"", "
"0","             color = ""red"", size=1.5)+"
"0","  ggtitle(paste(""GAM model: Bikes rented interval: +-"", round(gam1error)))"
