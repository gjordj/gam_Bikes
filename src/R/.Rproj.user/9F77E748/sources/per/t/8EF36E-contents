---
title: "Bikes_GAM_Jordi_Tarroch"
author: "Jordi Tarroch"
date: "10/24/2019"
output: 
  pdf_document:
    fig_width: 7
    fig_height: 6
    fig_caption: true

---

```{r}
# Prediction of bike rental count hourly or daily based on the environmental and seasonal settings.


##############
#LIBRARIES####
##############
library(readr)
library(skimr)# Beautiful Summarize
library(corrplot)# Correlations
library(ggcorrplot)  # Correlations
library(PerformanceAnalytics) # Correlations
library(tidyverse)#select_at
library(splines)
library(gam)
library(ISLR)
library(boot)#cv.glm
library(caret) # Cross Validation

##############
# GET DATA####
##############
path <- 'day.csv'
raw_data <-  read_csv(path)


#########################
  # DATA WRANGLING DATA####
#########################
dim(raw_data)
skim(raw_data) # Summarise

# CHECK DUPLICATED DATA: no duplicated data to delete.
# CHECK NA's: no NAs to delete.
```


```{r}
##############################
#EXPLORATORY DATA ANALYSIS####
##############################################################################################################

# CHECK NON-SENSE DATA: delete instant column that has same values as the index, date as we don't care about 
# the number of the day inside the month and the year.

# Excluded vars (factor)
vars <- c("instant","dteday","yr")

#####################
# CORRELATION MATRIX#
#####################
# Correlations
corrplot(cor(raw_data %>% 
               select_at(vars(-vars)), 
             use = "complete.obs"), 
         method = "circle",type = "upper")

# Other Correlations
ggcorrplot(cor(raw_data %>% 
                 select_at(vars(-vars)), 
               use = "complete.obs"),
           hc.order = TRUE,
           type = "lower",  lab = TRUE)

# Other Correlations
chart.Correlation(raw_data %>% 
                    select_at(vars(-vars)),
                  histogram = TRUE, pch = 19)

#Check initial correlation between variables and cnt based on a coefficient.
newData <- raw_data %>% select_at(vars(-vars))
newData.cor = cor(newData)
corrplot(newData.cor)
corrplot(newData.cor, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)



newData.cor <- data.frame(newData.cor)
correlated <- c()
variable <- c()
coefficient_limit  <- c()
select_columns <-  c()
coeff <-  0.3
newData.cor[13,1]
dim(newData.cor)[1]
newData.cor[13,1] 

for(column in 1:dim(newData.cor)[1]){
  if(abs(newData.cor[13,column]) > coeff){
    variable <-  append(variable, names(newData.cor)[column])
    correlated  <-  append(correlated, newData.cor[13,column] )
    coefficient_limit <- append(coefficient_limit,coeff)
  }
}
correlated_variables <-  data.frame(variable,correlated, coefficient_limit)
# correlated_variables <-  data.frame(variable,correlated)

print(correlated_variables)
```


```{r}
#################################################################################################
# PREDICTION 1#####################################################################################
#################################################################################################


###################
# FIT POLYNOMIALS ######################################################################################
###################
###########################
# Degres of the polynomial#
###########################

raw_data <-  read_csv(path)


polynomial_fit <- function(raw_data, column, name_variable){
  raw_data <- raw_data[,c(column, 16)]
  names(raw_data)[1] <- "variable"
  names(raw_data)[2] <- "cnt"
  max_length <- min(5, length(unique(raw_data$variable))-1)
  set.seed(17)
  cv.errors <- data.frame(degree=seq(1,max_length,1), 
                          error= rep(NA, max_length))
  
  for (i in 1:max_length) {  # loop through 1-5 degree polynomials
    glm.fit <- glm(cnt~poly(variable, i), data=raw_data)
    cv.errors$error[i] <- cv.glm(raw_data, glm.fit, K=10)$delta[1]
  }
  
  kable(cv.errors)
  if(name_variable %in% c('Season','Holiday', 'Working Day', 'Weather Situation')){
    polynomial_degree_min_error <- cv.errors[which(cv.errors$error == min(cv.errors$error)), ]
    print(name_variable)
    print(polynomial_degree_min_error)
    
  }else{
    polynomial_degree_min_error <- cv.errors[which(cv.errors$error == min(cv.errors$error)), ]
    
    glm.fit1<- glm(cnt~poly(variable, 1), data=raw_data)
    glm.fit2<- glm(cnt~poly(variable, 2), data=raw_data)
    glm.fit3<- glm(cnt~poly(variable, 3), data=raw_data)
    glm.fit4<- glm(cnt~poly(variable, 4), data=raw_data)
    glm.fit5<- glm(cnt~poly(variable, 5), data=raw_data)
    
    
    x_values <- range(raw_data$variable)
    x_to_y <- seq(x_values[1], x_values[2], length.out = 1000)
    y_values1 <- predict(glm.fit1, newdata = list( variable = x_to_y), se = TRUE)
    y_values2 <- predict(glm.fit2, newdata = list( variable = x_to_y), se = TRUE)
    y_values3 <- predict(glm.fit3, newdata = list( variable = x_to_y), se = TRUE)
    y_values4 <- predict(glm.fit4, newdata = list( variable = x_to_y), se = TRUE)
    y_values5 <- predict(glm.fit5, newdata = list( variable = x_to_y), se = TRUE)
    
    
    ggplot() +
      geom_point(data  =  raw_data, aes(x = variable, y = cnt),size = 1, shape = 1) +
      labs(
        x = name_variable,
        y = "Count"
      ) +
      geom_line(aes(x = seq(x_values[1],x_values[2], length.out = 1000), y = y_values1$fit, colour = '1')) +
      geom_line(aes(x = seq(x_values[1],x_values[2], length.out = 1000), y = y_values2$fit, colour = '2')) +
      geom_line(aes(x = seq(x_values[1],x_values[2], length.out = 1000), y = y_values3$fit, colour = '3')) +
      geom_line(aes(x = seq(x_values[1],x_values[2], length.out = 1000), y = y_values4$fit, colour = '4')) +
      geom_line(aes(x = seq(x_values[1],x_values[2], length.out = 1000), y = y_values5$fit, colour = '5'))+
      ggtitle(paste("Polynomial degrees:", polynomial_degree_min_error))
    }
  }
```


```{r}
############################################################################
# Plot relationships: Count vs Variable with the optimal polynomial degrees# 
############################################################################
temp_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "temp"), "Temperature")
temp_polynomial_degree# 5
season_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "season"), "Season")
season_polynomial_degree# 2
mnth_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "mnth"), "Month")
mnth_polynomial_degree# 4
holiday_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "holiday"), "Holiday")
holiday_polynomial_degree# 1
workingday_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "workingday"), "Working Day")
workingday_polynomial_degree# 1
weekday_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "weekday"), "Weekday")
weekday_polynomial_degree# 2
weathersit_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "weathersit"), "Weather Situation")
weathersit_polynomial_degree# 2
atemp_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "atemp"), "Feeling Temperature")
atemp_polynomial_degree# 5
hum_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "hum"), "Humidity")
hum_polynomial_degree# 3
windspeed_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "windspeed"), "Wind Speed")
windspeed_polynomial_degree# 2
casual_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "casual"), "Casual")
casual_polynomial_degree# 5
registered_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "registered"), "Registered")
registered_polynomial_degree# 2
```


```{r}
#########################
#FIT A SMOOTHING SPLINE#################################################################################
#########################

##################################
# Degres of freedom of the spline#
##################################
#We can also fit a smoothing spline with none other than smooth.spline(). Here we fit a spline with
# 16 degrees of freedom, then spline chosen by cross-validation, which yields 6.8 degrees of freedom.


spline_line <- function(raw_data, column, name_variable){
  raw_data <- raw_data[,c(column, 16)]
  names(raw_data)[1] <- "variable"
  names(raw_data)[2] <- "cnt"

  fit <- smooth.spline(raw_data$variable, raw_data$cnt, df = 16)
  fit2 <- smooth.spline(raw_data$variable, raw_data$cnt, cv = TRUE)
  freedom_degrees <- (fit2$df)
  
  # legend('topright', legend = c('16 DF', '9.1 DF'),
  #        col = c('red','blue'), lty = 1, lwd = 2, cex = 0.8)
  
  ggplot() +
    geom_point(data  =  raw_data, aes(x = variable, y = cnt),size = 1, shape = 1) +
    labs(
      x = name_variable,
      y = "Count"
    ) + 
    ggtitle(paste("Freedom degrees:", freedom_degrees)) + 
    geom_line(aes(x = fit$x, y = fit$y), colour = 'red') + 
    geom_line(aes(x = fit2$x, y = fit2$y), colour = 'blue')
}
```


```{r}
#########################################################################################
# Plot relationships: Count vs Variable with the spline with the optimal freedom degrees# 
#########################################################################################
spline_line(raw_data, which( colnames(raw_data) == "temp" ), "Temperature")
spline_line(raw_data, which( colnames(raw_data) == "season" ), "Season")
spline_line(raw_data, which( colnames(raw_data) == "mnth" ), "Month")
# spline_line(raw_data, which( colnames(raw_data) == "holiday" ), "Holiday")
# spline_line(raw_data, which( colnames(raw_data) == "weekday" ), "Weekday")
# spline_line(raw_data, which( colnames(raw_data) == "workingday" ), "Working Day")
# spline_line(raw_data, which( colnames(raw_data) == "weathersit" ), "Weather Situation")
spline_line(raw_data, which( colnames(raw_data) == "atemp" ), "Feeling Temperature")
spline_line(raw_data, which( colnames(raw_data) == "hum" ), "Humidity")
spline_line(raw_data, which( colnames(raw_data) == "windspeed" ), "Wind Speed")
spline_line(raw_data, which( colnames(raw_data) == "casual" ), "Casual")
spline_line(raw_data, which( colnames(raw_data) == "registered" ), "Registered")
```


```{r}
#############################
# GENERALIZED ADDITIVE MODEL##################################################################################
#############################



#######
# GAMs##############################################################################################################
#######

##########################################
# USING POLYNOMIAL DEGREES OF POLYNOMIALS#
##########################################
glm1 <- glm(cnt~poly(temp, 5)+poly(season, 2)+poly(mnth, 4)+
             poly(holiday,1) + poly(weekday, 2)+poly(workingday, 1)+poly(weathersit, 2)+
             poly(atemp, 5)+poly(hum, 3)+poly(windspeed, 2), data=raw_data)

# cv.glm(raw_data, glm1, K=10)$delta[1]
set.seed(17)
# k-fold cross validation is a procedure used to estimate the skill of the model on new data.
# https://machinelearningmastery.com/k-fold-cross-validation/
glm1error <- sqrt(cv.glm(raw_data, glm1, K=10)$delta[1])
glm1error
summary(glm1)

ggplot(raw_data, aes(x= cnt)) + 
  geom_histogram(aes(y=..density..), colour="black", fill="white")+
  geom_density(alpha=.2, fill="#FF6666")+
  geom_vline(xintercept = mean(raw_data$cnt)+glm1error, linetype="dotted", 
             color = "red", size=1.5)+
  geom_vline(xintercept = mean(raw_data$cnt)-glm1error, linetype="dotted", 
             color = "red", size=1.5)+
  ggtitle(paste("Polynomial model: Bikes rented interval: +-", round(glm1error)))
```


```{r}
###################################
# USING FREEDOM DEGREES OF SPLINES#
###################################

#################################################################################
# Optimal DF of the splines used for each relationship between Count vs Variable#
#################################################################################
# To apply GAMs we need the following:
#We calculate again the freedom degrees of each spline for each relationship.
df_temp <- (smooth.spline(raw_data$temp, raw_data$cnt, cv = TRUE)$df)
df_season <- (smooth.spline(raw_data$season, raw_data$cnt, cv = TRUE)$df)
df_mnth <- (smooth.spline(raw_data$mnth, raw_data$cnt, cv = TRUE)$df)
# df_holiday <- smooth.spline(raw_data$holiday, raw_data$cnt, cv = TRUE)$df
# df_weekday <- smooth.spline(raw_data$weekday, raw_data$cnt, cv = TRUE)$df
# df_workingday <- smooth.spline(raw_data$workingday, raw_data$cnt, cv = TRUE)$df
# df_weathersit <- smooth.spline(raw_data$weathersit, raw_data$cnt, cv = TRUE)$df
df_atemp <- (smooth.spline(raw_data$atemp, raw_data$cnt, cv = TRUE)$df)
df_hum <- (smooth.spline(raw_data$hum, raw_data$cnt, cv = TRUE)$df)
df_windspeed <- (smooth.spline(raw_data$windspeed, raw_data$cnt, cv = TRUE)$df)
df_casual <- (smooth.spline(raw_data$casual, raw_data$cnt, cv = TRUE)$df)
df_registered <- (smooth.spline(raw_data$registered, raw_data$cnt, cv = TRUE)$df)

df_temp
df_season
df_mnth
df_atemp
df_hum
df_windspeed
df_casual
df_registered


#############################
# Creation of different GAMs#
#############################
#Now we use GAMs to predict Count using a natural spline of different variables. 

# Categorical variables
# raw_data$season <- as.factor(raw_data$season)
# raw_data$weathersit <- as.factor(raw_data$weathersit)
# raw_data$mnth <- as.factor(raw_data$mnth)
# raw_data$weekday <- as.factor(raw_data$weekday)
# Dumny variables:
# holiday, workingday are dummy (0,1)

# gam1 <- gam(cnt~s(temp, 9)+
#               season +
#               mnth +
#               s(atemp,9 )+
#               s(hum,5 )+
#               s(windspeed,6 )+holiday+weekday+workingday+weathersit, data=raw_data)


#To fit more complex splines, or other components that cannot be specified as basis functions, we need to use
# the gam library in R. the s() function is used to indicate a smoothing spline.
gam1 <- gam(cnt~s(temp, df_temp)+
              s(season,df_season )+
              s(mnth, df_mnth)+
              s(atemp,df_atemp )+
              s(hum,df_hum )+
              s(windspeed,df_windspeed )+holiday+weekday+workingday+weathersit, data=raw_data)


# plot(gam1, se=TRUE, col='green')

set.seed(17)
gam1error <- sqrt(cv.glm(raw_data, gam1, K=10)$delta[1])
gam1error
summary(gam1)


ggplot(raw_data, aes(x= cnt)) + 
  geom_histogram(aes(y=..density..), colour="black", fill="white")+
  geom_density(alpha=.2, fill="#FF6666")+
  geom_vline(xintercept = mean(raw_data$cnt)+gam1error, linetype="dotted", 
               color = "red", size=1.5)+
  geom_vline(xintercept = mean(raw_data$cnt)-gam1error, linetype="dotted", 
             color = "red", size=1.5)+
  ggtitle(paste("GAM model: Bikes rented interval: +-", round(gam1error)))
  
###################
# Comparing models#
###################
# A is p% greater than B
# p % = ( A − B ) / B ⋅ 100 %
gam1error
glm1error
gam1_worse_glm1 <- (gam1error - glm1error) / glm1error * 100
cat("Gam model is ", gam1_worse_glm1, "% worse than the polynomial model.")

#######################################################################################


```





```{r}
#################################################################################################
# PREDICTION 2: SPLIT OF CASUAL AND REGISTERED USERS#############################################
#################################################################################################

############################################################
# CASUAL####################################################
############################################################

###################
# FIT POLYNOMIALS ######################################################################################
###################
###########################
# Degres of the polynomial#
###########################

raw_data <-  read_csv(path)
polynomial_fit <- function(raw_data, column, name_variable){
  raw_data <- raw_data[,c(column, 14)]
  names(raw_data)[1] <- "variable"
  names(raw_data)[2] <- "casual"
  max_length <- min(5, length(unique(raw_data$variable))-1)
  set.seed(17)
  cv.errors <- data.frame(degree=seq(1,max_length,1), 
                          error= rep(NA, max_length))
  
  for (i in 1:max_length) {  # loop through 1-5 degree polynomials
    glm.fit <- glm(casual~poly(variable, i), data=raw_data)
    cv.errors$error[i] <- cv.glm(raw_data, glm.fit, K=10)$delta[1]
  }
  
  kable(cv.errors)
  if(name_variable %in% c('Season','Holiday', 'Working Day', 'Weather Situation')){
    polynomial_degree_min_error <- cv.errors[which(cv.errors$error == min(cv.errors$error)), ]
    print(name_variable)
    print(polynomial_degree_min_error)
    
  }else{
    polynomial_degree_min_error <- cv.errors[which(cv.errors$error == min(cv.errors$error)), ]
    
    glm.fit1<- glm(casual~poly(variable, 1), data=raw_data)
    glm.fit2<- glm(casual~poly(variable, 2), data=raw_data)
    glm.fit3<- glm(casual~poly(variable, 3), data=raw_data)
    glm.fit4<- glm(casual~poly(variable, 4), data=raw_data)
    glm.fit5<- glm(casual~poly(variable, 5), data=raw_data)
    
    
    x_values <- range(raw_data$variable)
    x_to_y <- seq(x_values[1], x_values[2], length.out = 1000)
    y_values1 <- predict(glm.fit1, newdata = list( variable = x_to_y), se = TRUE)
    y_values2 <- predict(glm.fit2, newdata = list( variable = x_to_y), se = TRUE)
    y_values3 <- predict(glm.fit3, newdata = list( variable = x_to_y), se = TRUE)
    y_values4 <- predict(glm.fit4, newdata = list( variable = x_to_y), se = TRUE)
    y_values5 <- predict(glm.fit5, newdata = list( variable = x_to_y), se = TRUE)
    
    
    ggplot() +
      geom_point(data  =  raw_data, aes(x = variable, y = casual),size = 1, shape = 1) +
      labs(
        x = name_variable,
        y = "Casual"
      ) +
      geom_line(aes(x = seq(x_values[1],x_values[2], length.out = 1000), y = y_values1$fit, colour = '1')) +
      geom_line(aes(x = seq(x_values[1],x_values[2], length.out = 1000), y = y_values2$fit, colour = '2')) +
      geom_line(aes(x = seq(x_values[1],x_values[2], length.out = 1000), y = y_values3$fit, colour = '3')) +
      geom_line(aes(x = seq(x_values[1],x_values[2], length.out = 1000), y = y_values4$fit, colour = '4')) +
      geom_line(aes(x = seq(x_values[1],x_values[2], length.out = 1000), y = y_values5$fit, colour = '5'))+
      ggtitle(paste("Polynomial degrees:", polynomial_degree_min_error))
  }
}
```


```{r}
############################################################################
# Plot relationships: Count vs Variable with the optimal polynomial degrees# 
############################################################################
temp_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "temp"), "Temperature")
temp_polynomial_degree# 5
season_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "season"), "Season")
season_polynomial_degree# 2
mnth_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "mnth"), "Month")
mnth_polynomial_degree# 4
holiday_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "holiday"), "Holiday")
holiday_polynomial_degree# 1
workingday_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "workingday"), "Working Day")
workingday_polynomial_degree# 1
weekday_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "weekday"), "Weekday")
weekday_polynomial_degree# 5
weathersit_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "weathersit"), "Weather Situation")
weathersit_polynomial_degree# 2
atemp_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "atemp"), "Feeling Temperature")
atemp_polynomial_degree# 4
hum_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "hum"), "Humidity")
hum_polynomial_degree# 2
windspeed_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "windspeed"), "Wind Speed")
windspeed_polynomial_degree# 2
casual_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "casual"), "Casual")
casual_polynomial_degree# 1
registered_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "registered"), "Registered")
registered_polynomial_degree# 2
```


```{r}
#########################
#FIT A SMOOTHING SPLINE#################################################################################
#########################

##################################
# Degres of freedom of the spline#
##################################
#We can also fit a smoothing spline with none other than smooth.spline(). Here we fit a spline with
# 16 degrees of freedom, then spline chosen by cross-validation, which yields 6.8 degrees of freedom.
spline_line <- function(raw_data, column, name_variable){
  raw_data <- raw_data[,c(column, 14)]
  names(raw_data)[1] <- "variable"
  names(raw_data)[2] <- "casual"
  
  fit <- smooth.spline(raw_data$variable, raw_data$casual, df = 16)
  fit2 <- smooth.spline(raw_data$variable, raw_data$casual, cv = TRUE)
  freedom_degrees <- (fit2$df)
  
  # legend('topright', legend = c('16 DF', '9.1 DF'),
  #        col = c('red','blue'), lty = 1, lwd = 2, cex = 0.8)
  
  ggplot() +
    geom_point(data  =  raw_data, aes(x = variable, y = casual),size = 1, shape = 1) +
    labs(
      x = name_variable,
      y = "Casual"
    ) + 
    ggtitle(paste("Freedom degrees:", freedom_degrees)) + 
    geom_line(aes(x = fit$x, y = fit$y), colour = 'red') + 
    geom_line(aes(x = fit2$x, y = fit2$y), colour = 'blue')
}
```


```{r}
#########################################################################################
# Plot relationships: Count vs Variable with the spline with the optimal freedom degrees# 
#########################################################################################
spline_line(raw_data, which( colnames(raw_data) == "temp" ), "Temperature")
spline_line(raw_data, which( colnames(raw_data) == "season" ), "Season")
spline_line(raw_data, which( colnames(raw_data) == "mnth" ), "Month")
# spline_line(raw_data, which( colnames(raw_data) == "holiday" ), "Holiday")
# spline_line(raw_data, which( colnames(raw_data) == "weekday" ), "Weekday")
# spline_line(raw_data, which( colnames(raw_data) == "workingday" ), "Working Day")
# spline_line(raw_data, which( colnames(raw_data) == "weathersit" ), "Weather Situation")
spline_line(raw_data, which( colnames(raw_data) == "atemp" ), "Feeling Temperature")
spline_line(raw_data, which( colnames(raw_data) == "hum" ), "Humidity")
spline_line(raw_data, which( colnames(raw_data) == "windspeed" ), "Wind Speed")
spline_line(raw_data, which( colnames(raw_data) == "casual" ), "Casual")
spline_line(raw_data, which( colnames(raw_data) == "registered" ), "Registered")
```


```{r}
#############################
# GENERALIZED ADDITIVE MODEL##################################################################################
#############################



#######
# GAMs##############################################################################################################
#######

##########################################
# USING POLYNOMIAL DEGREES OF POLYNOMIALS#
##########################################

glm1 <- glm(casual~poly(temp, 5)+poly(season, 2)+poly(mnth, 4)+
              poly(holiday,1) + poly(weekday, 5)+poly(workingday, 1)+poly(weathersit, 2)+
              poly(atemp, 4)+poly(hum, 2)+poly(windspeed, 2), data=raw_data)

# cv.glm(raw_data, glm1, K=10)$delta[1]
set.seed(17)
# k-fold cross validation is a procedure used to estimate the skill of the model on new data.
# https://machinelearningmastery.com/k-fold-cross-validation/
glm1error <- sqrt(cv.glm(raw_data, glm1, K=10)$delta[1])
glm1error
summary(glm1)

ggplot(raw_data, aes(x= casual)) + 
  geom_histogram(aes(y=..density..), colour="black", fill="white")+
  geom_density(alpha=.2, fill="#FF6666")+
  geom_vline(xintercept = mean(raw_data$casual)+glm1error, linetype="dotted", 
             color = "red", size=1.5)+
  geom_vline(xintercept = mean(raw_data$casual)-glm1error, linetype="dotted", 
             color = "red", size=1.5)+
  ggtitle(paste("Polynomial model: Bikes rented interval: +-", round(glm1error)))
```


```{r}
###################################
# USING FREEDOM DEGREES OF SPLINES#
###################################

#################################################################################
# Optimal DF of the splines used for each relationship between Count vs Variable#
#################################################################################
# To apply GAMs we need the following:
#We calculate again the freedom degrees of each spline for each relationship.
df_temp <- (smooth.spline(raw_data$temp, raw_data$casual, cv = TRUE)$df)
df_season <- (smooth.spline(raw_data$season, raw_data$casual, cv = TRUE)$df)
df_mnth <- (smooth.spline(raw_data$mnth, raw_data$casual, cv = TRUE)$df)
# df_holiday <- smooth.spline(raw_data$holiday, raw_data$casual, cv = TRUE)$df
# df_weekday <- smooth.spline(raw_data$weekday, raw_data$casual, cv = TRUE)$df
# df_workingday <- smooth.spline(raw_data$workingday, raw_data$casual, cv = TRUE)$df
# df_weathersit <- smooth.spline(raw_data$weathersit, raw_data$casual, cv = TRUE)$df
df_atemp <- (smooth.spline(raw_data$atemp, raw_data$casual, cv = TRUE)$df)
df_hum <- (smooth.spline(raw_data$hum, raw_data$casual, cv = TRUE)$df)
df_windspeed <- (smooth.spline(raw_data$windspeed, raw_data$casual, cv = TRUE)$df)
df_casual <- (smooth.spline(raw_data$casual, raw_data$casual, cv = TRUE)$df)
df_registered <- (smooth.spline(raw_data$registered, raw_data$registered, cv = TRUE)$df)


df_temp
df_season
df_mnth
df_atemp
df_hum
df_windspeed
df_casual
df_registered
```


```{r}
#############################
# Creation of different GAMs#
#############################
#Now we use GAMs to predict Count using a natural spline of different variables. 

# Categorical variables
# raw_data$season <- as.factor(raw_data$season)
# raw_data$weathersit <- as.factor(raw_data$weathersit)
# raw_data$mnth <- as.factor(raw_data$mnth)
# raw_data$weekday <- as.factor(raw_data$weekday)
# Dumny variables:
# holiday, workingday are dummy (0,1)

# gam1 <- gam(casual~s(temp, 9)+
#               season +
#               mnth +
#               s(atemp,9 )+
#               s(hum,5 )+
#               s(windspeed,6 )+holiday+weekday+workingday+weathersit, data=raw_data)


#To fit more complex splines, or other components that cannot be specified as basis functions, we need to use
# the gam library in R. the s() function is used to indicate a smoothing spline.
gam1 <- gam(casual~s(temp, df_temp)+
              s(season,df_season )+
              s(mnth, df_mnth)+
              s(atemp,df_atemp )+
              s(hum,df_hum )+
              s(windspeed,df_windspeed )+holiday+weekday+workingday+weathersit, data=raw_data)


# plot(gam1, se=TRUE, col='green')

set.seed(17)
gam1error <- sqrt(cv.glm(raw_data, gam1, K=10)$delta[1])
gam1error
summary(gam1)


ggplot(raw_data, aes(x= casual)) + 
  geom_histogram(aes(y=..density..), colour="black", fill="white")+
  geom_density(alpha=.2, fill="#FF6666")+
  geom_vline(xintercept = mean(raw_data$casual)+gam1error, linetype="dotted", 
             color = "red", size=1.5)+
  geom_vline(xintercept = mean(raw_data$casual)-gam1error, linetype="dotted", 
             color = "red", size=1.5)+
  ggtitle(paste("GAM model: Bikes rented interval: +-", round(gam1error)))
```


```{r}
###################
# Comparing models#
###################
# A is p% greater than B
# p % = ( A − B ) / B ⋅ 100 %
gam1error
glm1error
gam1_worse_glm1 <- (glm1error -  gam1error) / glm1error * 100
cat("Polynomial model is ", gam1_worse_glm1, "% worse than the gam model.")

#######################################################################################



```





```{r}
####################################
# REGISTERED################################################
############################################################


###################
# FIT POLYNOMIALS ######################################################################################
###################
###########################
# Degres of the polynomial#
###########################

raw_data <-  read_csv(path)
polynomial_fit <- function(raw_data, column, name_variable){
  raw_data <- raw_data[,c(column, 15)]
  names(raw_data)[1] <- "variable"
  names(raw_data)[2] <- "registered"
  max_length <- min(5, length(unique(raw_data$variable))-1)
  set.seed(17)
  cv.errors <- data.frame(degree=seq(1,max_length,1), 
                          error= rep(NA, max_length))
  
  for (i in 1:max_length) {  # loop through 1-5 degree polynomials
    glm.fit <- glm(registered~poly(variable, i), data=raw_data)
    cv.errors$error[i] <- cv.glm(raw_data, glm.fit, K=10)$delta[1]
  }
  
  kable(cv.errors)
  if(name_variable %in% c('Season','Holiday', 'Working Day', 'Weather Situation')){
    polynomial_degree_min_error <- cv.errors[which(cv.errors$error == min(cv.errors$error)), ]
    print(name_variable)
    print(polynomial_degree_min_error)
    
  }else{
    polynomial_degree_min_error <- cv.errors[which(cv.errors$error == min(cv.errors$error)), ]
    
    glm.fit1<- glm(registered~poly(variable, 1), data=raw_data)
    glm.fit2<- glm(registered~poly(variable, 2), data=raw_data)
    glm.fit3<- glm(registered~poly(variable, 3), data=raw_data)
    glm.fit4<- glm(registered~poly(variable, 4), data=raw_data)
    glm.fit5<- glm(registered~poly(variable, 5), data=raw_data)
    
    
    x_values <- range(raw_data$variable)
    x_to_y <- seq(x_values[1], x_values[2], length.out = 1000)
    y_values1 <- predict(glm.fit1, newdata = list( variable = x_to_y), se = TRUE)
    y_values2 <- predict(glm.fit2, newdata = list( variable = x_to_y), se = TRUE)
    y_values3 <- predict(glm.fit3, newdata = list( variable = x_to_y), se = TRUE)
    y_values4 <- predict(glm.fit4, newdata = list( variable = x_to_y), se = TRUE)
    y_values5 <- predict(glm.fit5, newdata = list( variable = x_to_y), se = TRUE)
    
    
    ggplot() +
      geom_point(data  =  raw_data, aes(x = variable, y = registered),size = 1, shape = 1) +
      labs(
        x = name_variable,
        y = "Registered"
      ) +
      geom_line(aes(x = seq(x_values[1],x_values[2], length.out = 1000), y = y_values1$fit, colour = '1')) +
      geom_line(aes(x = seq(x_values[1],x_values[2], length.out = 1000), y = y_values2$fit, colour = '2')) +
      geom_line(aes(x = seq(x_values[1],x_values[2], length.out = 1000), y = y_values3$fit, colour = '3')) +
      geom_line(aes(x = seq(x_values[1],x_values[2], length.out = 1000), y = y_values4$fit, colour = '4')) +
      geom_line(aes(x = seq(x_values[1],x_values[2], length.out = 1000), y = y_values5$fit, colour = '5'))+
      ggtitle(paste("Polynomial degrees:", polynomial_degree_min_error))
  }
}
```


```{r}
############################################################################
# Plot relationships: Count vs Variable with the optimal polynomial degrees# 
############################################################################
temp_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "temp"), "Temperature")
temp_polynomial_degree# 3
season_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "season"), "Season")
season_polynomial_degree# 2
mnth_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "mnth"), "Month")
mnth_polynomial_degree# 3
holiday_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "holiday"), "Holiday")
holiday_polynomial_degree# 1
workingday_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "workingday"), "Working Day")
workingday_polynomial_degree# 1
weekday_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "weekday"), "Weekday")
weekday_polynomial_degree# 2
weathersit_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "weathersit"), "Weather Situation")
weathersit_polynomial_degree# 2
atemp_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "atemp"), "Feeling Temperature")
atemp_polynomial_degree# 3
hum_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "hum"), "Humidity")
hum_polynomial_degree# 3
windspeed_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "windspeed"), "Wind Speed")
windspeed_polynomial_degree# 2
casual_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "casual"), "casual")
casual_polynomial_degree# 5
registered_polynomial_degree<- polynomial_fit(raw_data, which( colnames(raw_data) == "registered"), "Registered")
registered_polynomial_degree# 5
```


```{r}
#########################
#FIT A SMOOTHING SPLINE#################################################################################
#########################

##################################
# Degres of freedom of the spline#
##################################
#We can also fit a smoothing spline with none other than smooth.spline(). Here we fit a spline with
# 16 degrees of freedom, then spline chosen by cross-validation, which yields 6.8 degrees of freedom.
spline_line <- function(raw_data, column, name_variable){
  raw_data <- raw_data[,c(column, 15)]
  names(raw_data)[1] <- "variable"
  names(raw_data)[2] <- "registered"
  
  fit <- smooth.spline(raw_data$variable, raw_data$registered, df = 16)
  fit2 <- smooth.spline(raw_data$variable, raw_data$registered, cv = TRUE)
  freedom_degrees <- (fit2$df)
  
  # legend('topright', legend = c('16 DF', '9.1 DF'),
  #        col = c('red','blue'), lty = 1, lwd = 2, cex = 0.8)
  
  ggplot() +
    geom_point(data  =  raw_data, aes(x = variable, y = registered),size = 1, shape = 1) +
    labs(
      x = name_variable,
      y = "Registered"
    ) + 
    ggtitle(paste("Freedom degrees:", freedom_degrees)) + 
    geom_line(aes(x = fit$x, y = fit$y), colour = 'red') + 
    geom_line(aes(x = fit2$x, y = fit2$y), colour = 'blue')
}
```


```{r}
#########################################################################################
# Plot relationships: Count vs Variable with the spline with the optimal freedom degrees# 
#########################################################################################
spline_line(raw_data, which( colnames(raw_data) == "temp" ), "Temperature")
spline_line(raw_data, which( colnames(raw_data) == "season" ), "Season")
spline_line(raw_data, which( colnames(raw_data) == "mnth" ), "Month")
# spline_line(raw_data, which( colnames(raw_data) == "holiday" ), "Holiday")
# spline_line(raw_data, which( colnames(raw_data) == "weekday" ), "Weekday")
# spline_line(raw_data, which( colnames(raw_data) == "workingday" ), "Working Day")
# spline_line(raw_data, which( colnames(raw_data) == "weathersit" ), "Weather Situation")
spline_line(raw_data, which( colnames(raw_data) == "atemp" ), "Feeling Temperature")
spline_line(raw_data, which( colnames(raw_data) == "hum" ), "Humidity")
spline_line(raw_data, which( colnames(raw_data) == "windspeed" ), "Wind Speed")
spline_line(raw_data, which( colnames(raw_data) == "casual" ), "casual")
spline_line(raw_data, which( colnames(raw_data) == "registered" ), "Registered")
```


```{r}
#############################
# GENERALIZED ADDITIVE MODEL##################################################################################
#############################



#######
# GAMs##############################################################################################################
#######

##########################################
# USING POLYNOMIAL DEGREES OF POLYNOMIALS#
##########################################

glm1 <- glm(registered~poly(temp, 3)+poly(season, 2)+poly(mnth, 3)+
              poly(holiday,1) + poly(weekday, 2)+poly(workingday, 1)+poly(weathersit, 2)+
              poly(atemp, 3)+poly(hum, 3)+poly(windspeed, 2), data=raw_data)

# cv.glm(raw_data, glm1, K=10)$delta[1]
set.seed(17)
# k-fold cross validation is a procedure used to estimate the skill of the model on new data.
# https://machinelearningmastery.com/k-fold-cross-validation/
glm1error <- sqrt(cv.glm(raw_data, glm1, K=10)$delta[1])
glm1error
summary(glm1)

ggplot(raw_data, aes(x= registered)) + 
  geom_histogram(aes(y=..density..), colour="black", fill="white")+
  geom_density(alpha=.2, fill="#FF6666")+
  geom_vline(xintercept = mean(raw_data$registered)+glm1error, linetype="dotted", 
             color = "red", size=1.5)+
  geom_vline(xintercept = mean(raw_data$registered)-glm1error, linetype="dotted", 
             color = "red", size=1.5)+
  ggtitle(paste("Polynomial model: Bikes rented interval: +-", round(glm1error)))
```


```{r}
###################################
# USING FREEDOM DEGREES OF SPLINES#
###################################

#################################################################################
# Optimal DF of the splines used for each relationship between Count vs Variable#
#################################################################################
# To apply GAMs we need the following:
#We calculate again the freedom degrees of each spline for each relationship.
df_temp <- (smooth.spline(raw_data$temp, raw_data$registered, cv = TRUE)$df)
df_season <- (smooth.spline(raw_data$season, raw_data$registered, cv = TRUE)$df)
df_mnth <- (smooth.spline(raw_data$mnth, raw_data$registered, cv = TRUE)$df)
# df_holiday <- smooth.spline(raw_data$holiday, raw_data$registered, cv = TRUE)$df
# df_weekday <- smooth.spline(raw_data$weekday, raw_data$registered, cv = TRUE)$df
# df_workingday <- smooth.spline(raw_data$workingday, raw_data$registered, cv = TRUE)$df
# df_weathersit <- smooth.spline(raw_data$weathersit, raw_data$registered, cv = TRUE)$df
df_atemp <- (smooth.spline(raw_data$atemp, raw_data$registered, cv = TRUE)$df)
df_hum <- (smooth.spline(raw_data$hum, raw_data$registered, cv = TRUE)$df)
df_windspeed <- (smooth.spline(raw_data$windspeed, raw_data$registered, cv = TRUE)$df)
df_casual <- (smooth.spline(raw_data$registered, raw_data$casual, cv = TRUE)$df)
df_registered <- (smooth.spline(raw_data$registered, raw_data$registered, cv = TRUE)$df)


df_temp
df_season
df_mnth
df_atemp
df_hum
df_windspeed
df_casual
df_registered
```


```{r}
#############################
# Creation of different GAMs#
#############################
#Now we use GAMs to predict Count using a natural spline of different variables. 

# Categorical variables
# raw_data$season <- as.factor(raw_data$season)
# raw_data$weathersit <- as.factor(raw_data$weathersit)
# raw_data$mnth <- as.factor(raw_data$mnth)
# raw_data$weekday <- as.factor(raw_data$weekday)
# Dumny variables:
# holiday, workingday are dummy (0,1)

# gam1 <- gam(registered~s(temp, 9)+
#               season +
#               mnth +
#               s(atemp,9 )+
#               s(hum,5 )+
#               s(windspeed,6 )+holiday+weekday+workingday+weathersit, data=raw_data)


#To fit more complex splines, or other components that cannot be specified as basis functions, we need to use
# the gam library in R. the s() function is used to indicate a smoothing spline.
gam1 <- gam(registered~s(temp, df_temp)+
              s(season,df_season )+
              s(mnth, df_mnth)+
              s(atemp,df_atemp )+
              s(hum,df_hum )+
              s(windspeed,df_windspeed )+holiday+weekday+workingday+weathersit, data=raw_data)


# plot(gam1, se=TRUE, col='green')

set.seed(17)
gam1error <- sqrt(cv.glm(raw_data, gam1, K=10)$delta[1])
gam1error
summary(gam1)


ggplot(raw_data, aes(x= registered)) + 
  geom_histogram(aes(y=..density..), colour="black", fill="white")+
  geom_density(alpha=.2, fill="#FF6666")+
  geom_vline(xintercept = mean(raw_data$registered)+gam1error, linetype="dotted", 
             color = "red", size=1.5)+
  geom_vline(xintercept = mean(raw_data$registered)-gam1error, linetype="dotted", 
             color = "red", size=1.5)+
  ggtitle(paste("GAM model: Bikes rented interval: +-", round(gam1error)))
```


```{r}
###################
# Comparing models#
###################
# A is p% greater than B
# p % = ( A − B ) / B ⋅ 100 %
gam1error
glm1error
gam1_worse_glm1 <- (gam1error - glm1error) / glm1error * 100
cat("Gam model is ", gam1_worse_glm1, "% worse than the polynomial model.")

#######################################################################################

```


